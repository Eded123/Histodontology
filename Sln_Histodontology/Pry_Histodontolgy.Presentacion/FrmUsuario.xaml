<Window
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions" xmlns:ee="http://schemas.microsoft.com/expression/2010/effects" mc:Ignorable="d"
	x:Class="Pry_Histodontolgy.Presentacion.FrmUsuario"
	x:Name="Window"
	Title="FrmUsuario"
	Width="1021" Height="691" WindowStyle="None" ResizeMode="NoResize" WindowStartupLocation="CenterScreen">
	<Window.Resources>
		<Style x:Key="btnSalir2" TargetType="{x:Type Button}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<ControlTemplate.Resources>
							<Storyboard x:Key="btnSalirMouseEnter">
								<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="rectangle" Storyboard.TargetProperty="(UIElement.Opacity)">
									<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
								</DoubleAnimationUsingKeyFrames>
								<ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="label" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)">
									<SplineColorKeyFrame KeyTime="00:00:00.1000000" Value="White"/>
								</ColorAnimationUsingKeyFrames>
							</Storyboard>
						</ControlTemplate.Resources>
						<Canvas x:Name="btnSalir" Margin="0,0,-4.167,-11.458">
							<Rectangle x:Name="rectangle" Stroke="#FFB7B7B7" Width="26.664" Height="36.372" Canvas.Top="3.336" Opacity="0">
								<Rectangle.Effect>
									<BlurEffect Radius="20"/>
								</Rectangle.Effect>
								<Rectangle.Fill>
									<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
										<GradientStop Color="Red" Offset="0"/>
										<GradientStop Color="Red" Offset="1"/>
									</LinearGradientBrush>
								</Rectangle.Fill>
							</Rectangle>
							<Label x:Name="label" Width="24" Height="39.708" Content="x" FontFamily="Arial" FontSize="26.667" Foreground="#FF959595" Canvas.Left="2.664" Background="#00FF8181"/>
						</Canvas>
						<ControlTemplate.Triggers>
							<Trigger Property="IsFocused" Value="True"/>
							<Trigger Property="IsDefaulted" Value="True"/>
							<Trigger Property="IsMouseOver" Value="True">
								<Trigger.ExitActions>
									<StopStoryboard BeginStoryboardName="btnSalirMouseEnter_BeginStoryboard"/>
								</Trigger.ExitActions>
								<Trigger.EnterActions>
									<BeginStoryboard x:Name="btnSalirMouseEnter_BeginStoryboard" Storyboard="{StaticResource btnSalirMouseEnter}"/>
								</Trigger.EnterActions>
								<Setter Property="Effect" TargetName="rectangle">
									<Setter.Value>
										<BlurEffect Radius="20"/>
									</Setter.Value>
								</Setter>
							</Trigger>
							<Trigger Property="IsPressed" Value="True"/>
							<Trigger Property="IsEnabled" Value="False"/>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE"/>
	<!-- Disabled Brushes are used for the Disabled look of each control -->
		<SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888"/>
	<!-- Used for background of ScrollViewer, TreeView, ListBox, Expander, TextBox, Tab Control -->
		<SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF"/>
	
	<!-- NormalBrush is used as the Background for SimpleButton, SimpleRepeatButton -->
		<LinearGradientBrush x:Key="NormalBrush" EndPoint="0,1" StartPoint="0,0">
			<GradientStop Color="#EEE" Offset="0.0"/>
			<GradientStop Color="#CCC" Offset="1.0"/>
		</LinearGradientBrush>
		<LinearGradientBrush x:Key="NormalBorderBrush" EndPoint="0,1" StartPoint="0,0">
			<GradientStop Color="#CCC" Offset="0.0"/>
			<GradientStop Color="#444" Offset="1.0"/>
		</LinearGradientBrush>
	
	<!-- DefaultedBorderBrush is used to show KeyBoardFocus -->
		<LinearGradientBrush x:Key="DefaultedBorderBrush" EndPoint="0,1" StartPoint="0,0">
			<GradientStop Color="#777" Offset="0.0"/>
			<GradientStop Color="#000" Offset="1.0"/>
		</LinearGradientBrush>

	<!-- MouseOverBrush is used for MouseOver in Button, Radio Button, CheckBox -->
		<LinearGradientBrush x:Key="MouseOverBrush" EndPoint="0,1" StartPoint="0,0">
			<GradientStop Color="#FFF" Offset="0.0"/>
			<GradientStop Color="#AAA" Offset="1.0"/>
		</LinearGradientBrush>
	
	<!-- PressedBrush is used for Pressed in Button, Radio Button, CheckBox -->
		<LinearGradientBrush x:Key="PressedBrush" EndPoint="0,1" StartPoint="0,0">
			<GradientStop Color="#BBB" Offset="0.0"/>
			<GradientStop Color="#EEE" Offset="0.1"/>
			<GradientStop Color="#EEE" Offset="0.9"/>
			<GradientStop Color="#FFF" Offset="1.0"/>
		</LinearGradientBrush>
		<LinearGradientBrush x:Key="PressedBorderBrush" EndPoint="0,1" StartPoint="0,0">
			<GradientStop Color="#444" Offset="0.0"/>
			<GradientStop Color="#888" Offset="1.0"/>
		</LinearGradientBrush>

		<SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA"/>

	<!-- Simple Repeat Button - This is used by Simple ScrollBar for the up and down buttons -->
		<Style x:Key="SimpleRepeatButton" d:IsControlPart="True" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
			<Setter Property="Background" Value="{DynamicResource NormalBrush}"/>
			<Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type RepeatButton}">
						<Grid>
							<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
							<ContentPresenter HorizontalAlignment="Center" x:Name="ContentPresenter" VerticalAlignment="Center" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsKeyboardFocused" Value="true">
								<Setter Property="BorderBrush" Value="{DynamicResource DefaultedBorderBrush}" TargetName="Border"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Background" Value="{DynamicResource MouseOverBrush}" TargetName="Border"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="true">
								<Setter Property="Background" Value="{DynamicResource PressedBrush}" TargetName="Border"/>
								<Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}" TargetName="Border"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="false">
								<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
								<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
								<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	
	<!-- Simple ScrollRepeatButton Style - This RepeatButton is used above and below the Thumb in the Scrollbar. They are set to transparent si that they do not show over the scrollbar -->
		<Style x:Key="SimpleScrollRepeatButtonStyle" d:IsControlPart="True" TargetType="{x:Type RepeatButton}">
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="BorderBrush" Value="Transparent"/>
			<Setter Property="IsTabStop" Value="false"/>
			<Setter Property="Focusable" Value="false"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type RepeatButton}">
						<Grid>
							<Rectangle Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}"/>
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	
	<!-- Simple Thumb - The Thumb is the draggable part of the Scrollbar -->
		<Style x:Key="SimpleThumbStyle" d:IsControlPart="True" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Thumb}">
						<Grid Margin="0,0,0,0" x:Name="Grid">
							<Rectangle HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="2" RadiusY="2" Fill="{DynamicResource NormalBrush}" Stroke="{DynamicResource NormalBorderBrush}"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsFocused" Value="True"/>
							<Trigger Property="IsMouseOver" Value="True"/>
							<Trigger Property="IsEnabled" Value="False"/>
							<Trigger Property="IsDragging" Value="True"/>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	
	<!-- Simple ScrollBar  This makes use of SimpleThumb, SimpleRepeatButton and SimpleScrollRepeatButton -->
	
		<Style x:Key="SimpleScrollBar" TargetType="{x:Type ScrollBar}">
			<Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ScrollBar}">
						<Grid x:Name="GridRoot" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Background="{TemplateBinding Background}">
							<Grid.RowDefinitions>
								<RowDefinition MaxHeight="18"/>
								<RowDefinition Height="0.00001*"/>
								<RowDefinition MaxHeight="18"/>
							</Grid.RowDefinitions>
						
							<RepeatButton x:Name="DecreaseRepeat" Style="{DynamicResource SimpleRepeatButton}" Command="ScrollBar.LineUpCommand">
								<Grid>
									<Path x:Name="DecreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 0 4 L 8 4 L 4 0 Z"/>
								</Grid>
							</RepeatButton>
						
						<!-- Track is a special layout container which sizes the thumb and the repeat button which do jump scrolling either side of it -->
							<Track Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
								<Track.Thumb>
									<Thumb Style="{DynamicResource SimpleThumbStyle}"/>
								</Track.Thumb>
								<Track.IncreaseRepeatButton>
									<RepeatButton x:Name="PageUp" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="ScrollBar.PageDownCommand"/>
								</Track.IncreaseRepeatButton>
								<Track.DecreaseRepeatButton>
									<RepeatButton x:Name="PageDown" Style="{DynamicResource SimpleScrollRepeatButtonStyle}" Command="ScrollBar.PageUpCommand"/>
								</Track.DecreaseRepeatButton>
							</Track>
						
							<RepeatButton Grid.Row="2" x:Name="IncreaseRepeat" Style="{DynamicResource SimpleRepeatButton}" Command="ScrollBar.LineDownCommand">
								<Grid>
									<Path x:Name="IncreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 0 0 L 4 4 L 8 0 Z"/>
								</Grid>
							</RepeatButton>
						</Grid>
					
					<!-- This uses a single template for ScrollBar and rotate it to be Horizontal
					It also changes the commands so that the it does Left and Right instead of Up and Down Commands -->
						<ControlTemplate.Triggers>
							<Trigger Property="Orientation" Value="Horizontal">

							<!-- Rotate the ScrollBar from Vertical to Horizontal -->
								<Setter Property="LayoutTransform" TargetName="GridRoot">
									<Setter.Value>
										<RotateTransform Angle="-90"/>
									</Setter.Value>
								</Setter>
							
							<!-- Track is bound to Orientation internally, so we need to rotate it back to Vertical -->
								<Setter TargetName="PART_Track" Property="Orientation" Value="Vertical"/>
					
							<!-- Change the commands to do Horizontal commands -->
								<Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeat"/>
								<Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeat"/>
								<Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown"/>
								<Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	
	<!-- Simple ScrollViewer 
	ScrollViewer is a Grid control which has a ContentPresenter and a Horizontal and Vertical ScrollBar 
	It is used by ListBox, MenuItem, ComboBox, and TreeView -->
		<Style x:Key="SimpleScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ScrollViewer}">
						<Grid Background="{TemplateBinding Background}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*"/>
								<ColumnDefinition Width="Auto"/>
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="*"/>
								<RowDefinition Height="Auto"/>
							</Grid.RowDefinitions>
							<ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"/>
						
						<!-- The visibility of the ScrollBars is controlled by the implementation fo the control -->
							<ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" x:Name="PART_HorizontalScrollBar" Style="{DynamicResource SimpleScrollBar}" Orientation="Horizontal" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" />
							<ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" x:Name="PART_VerticalScrollBar" Style="{DynamicResource SimpleScrollBar}" Orientation="Vertical" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" />
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	
	<!-- Simple TextBox -->
		<Style x:Key="SimpleTextBox3" TargetType="{x:Type TextBox}">
			<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
			<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
			<Setter Property="AllowDrop" Value="true"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type TextBox}">
						<ControlTemplate.Resources>
							<Storyboard x:Key="txtfocus">
								<ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
									<SplineColorKeyFrame KeyTime="00:00:00.1000000" Value="#FFFFB900"/>
								</ColorAnimationUsingKeyFrames>
							</Storyboard>
						</ControlTemplate.Resources>
						<Grid>
							<Border x:Name="Border" Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="#FFBBBBBB" BorderThickness="1" Padding="2" CornerRadius="2">
							
							<!-- The implementation places the Content into the ScrollViewer. It must be named PART_ContentHost for the control to function -->
								<ScrollViewer Margin="0" x:Name="PART_ContentHost" Style="{DynamicResource SimpleScrollViewer}" Background="{TemplateBinding Background}"/>
						
							</Border>
						</Grid>
						<ControlTemplate.Triggers>
							<EventTrigger RoutedEvent="FocusManager.LostFocus">
								<StopStoryboard BeginStoryboardName="txtfocus_BeginStoryboard"/>
							</EventTrigger>
							<EventTrigger RoutedEvent="FocusManager.GotFocus">
								<BeginStoryboard x:Name="txtfocus_BeginStoryboard" Storyboard="{StaticResource txtfocus}"/>
							</EventTrigger>
							<Trigger Property="IsEnabled" Value="False">
								<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
								<Setter Property="BorderBrush" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
								<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="btnBuscar" TargetType="{x:Type Button}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<ControlTemplate.Resources>
							<Storyboard x:Key="btnBuscarMouseOver">
								<ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ellipse" Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)">
									<SplineColorKeyFrame KeyTime="00:00:00.1000000" Value="#FFFF7E00"/>
								</ColorAnimationUsingKeyFrames>
								<ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="path" Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)">
									<SplineColorKeyFrame KeyTime="00:00:00.1000000" Value="#FFFF7E00"/>
								</ColorAnimationUsingKeyFrames>
								<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ellipse" Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.Opacity)">
									<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
								</DoubleAnimationUsingKeyFrames>
								<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.Opacity)">
									<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
								</DoubleAnimationUsingKeyFrames>
								<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="btnBuscar" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
									<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
								</DoubleAnimationUsingKeyFrames>
								<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="btnBuscar" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
									<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0"/>
								</DoubleAnimationUsingKeyFrames>
							</Storyboard>
						</ControlTemplate.Resources>
						<Canvas x:Name="btnBuscar" RenderTransformOrigin="0.5,0.5" Margin="0,0,8.091,8.738">
							<Canvas.RenderTransform>
								<TransformGroup>
									<ScaleTransform/>
									<SkewTransform/>
									<RotateTransform/>
									<TranslateTransform/>
								</TransformGroup>
							</Canvas.RenderTransform>
							<Rectangle Stroke="White" StrokeLineJoin="Round" Width="73.32" Height="58.674" Fill="White" Canvas.Left="-0.324" Canvas.Top="0.647"/>
							<Ellipse x:Name="ellipse" Stretch="Fill" StrokeLineJoin="Round" Stroke="#FF9D9D9D" StrokeThickness="3" Width="15.69" Height="13.215" Canvas.Left="33.405" Canvas.Top="23.286" Fill="White">
								<Ellipse.Effect>
									<DropShadowEffect Opacity="0"/>
								</Ellipse.Effect>
							</Ellipse>
							<Path x:Name="path" Stretch="Fill" StrokeLineJoin="Round" Stroke="#FF9D9D9D" Data="F1 M 267.629,280.44L 238.128,321.44" StrokeThickness="3" Width="10.324" Height="12.321" Canvas.Left="29.304" Canvas.Top="33.373">
								<Path.Effect>
									<DropShadowEffect Opacity="0"/>
								</Path.Effect>
							</Path>
						</Canvas>
						<ControlTemplate.Triggers>
							<Trigger Property="IsFocused" Value="True"/>
							<Trigger Property="IsDefaulted" Value="True"/>
							<Trigger Property="IsMouseOver" Value="True">
								<Trigger.ExitActions>
									<StopStoryboard BeginStoryboardName="btnBuscarMouseOver_BeginStoryboard"/>
								</Trigger.ExitActions>
								<Trigger.EnterActions>
									<BeginStoryboard x:Name="btnBuscarMouseOver_BeginStoryboard" Storyboard="{StaticResource btnBuscarMouseOver}"/>
								</Trigger.EnterActions>
							</Trigger>
							<Trigger Property="IsPressed" Value="True"/>
							<Trigger Property="IsEnabled" Value="False"/>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Storyboard x:Key="AnimacionBotonSALIR"/>
		<Storyboard x:Key="animacionBotonOdontograma"/>
		<Storyboard x:Key="animacionBtnPagos"/>
		<Storyboard x:Key="animacionBtnInfoCliente"/>
		<Storyboard x:Key="animacionBtnHistoClinic"/>
		<Storyboard x:Key="animacionBtnNuevo"/>
		<Style x:Key="btnNuevo" TargetType="{x:Type Button}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<ControlTemplate.Resources>
							<Storyboard x:Key="AnimaNuevo">
								<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="btnNuevo">
									<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
									<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1.24"/>
								</DoubleAnimationUsingKeyFrames>
								<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="btnNuevo">
									<EasingDoubleKeyFrame KeyTime="0" Value="0"/>
									<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1.154"/>
								</DoubleAnimationUsingKeyFrames>
								<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="btnNuevo">
									<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
									<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1.109"/>
								</DoubleAnimationUsingKeyFrames>
								<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="btnNuevo">
									<EasingDoubleKeyFrame KeyTime="0" Value="0"/>
									<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.923"/>
								</DoubleAnimationUsingKeyFrames>
							</Storyboard>
						</ControlTemplate.Resources>
						<Grid>
							<VisualStateManager.VisualStateGroups>
								<VisualStateGroup x:Name="CommonStates">
									<VisualState x:Name="Normal"/>
									<VisualState x:Name="MouseOver">
										<Storyboard>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="btnNuevo">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1.24"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="btnNuevo">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1.154"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="btnNuevo">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1.149"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="btnNuevo">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="-0.383"/>
											</DoubleAnimationUsingKeyFrames>
											<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="image">
												<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
												<DiscreteObjectKeyFrame KeyTime="0:0:0.1" Value="{x:Static Visibility.Visible}"/>
											</ObjectAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="image">
												<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
											</DoubleAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
									<VisualState x:Name="Pressed"/>
									<VisualState x:Name="Disabled"/>
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>
							<VisualStateManager.CustomVisualStateManager>
								<ei:ExtendedVisualStateManager/>
							</VisualStateManager.CustomVisualStateManager>
							<Image x:Name="btnNuevo" RenderTransformOrigin="0.5,0.5" Source="031.png" Stretch="Fill" ToolTip="Nuevo Usuario">
								<Image.RenderTransform>
									<TransformGroup>
										<ScaleTransform/>
										<SkewTransform/>
										<RotateTransform/>
										<TranslateTransform/>
									</TransformGroup>
								</Image.RenderTransform>
							</Image>
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content=""/>
							<Image x:Name="image" Margin="0" Source="3.png" Stretch="Fill"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsFocused" Value="True"/>
							<Trigger Property="IsDefaulted" Value="True"/>
							<Trigger Property="IsMouseOver" Value="True"/>
							<Trigger Property="IsPressed" Value="True"/>
							<Trigger Property="IsEnabled" Value="False"/>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="btnHistoriaClinica" TargetType="{x:Type Button}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Grid>
							<VisualStateManager.VisualStateGroups>
								<VisualStateGroup x:Name="CommonStates">
									<VisualState x:Name="Normal"/>
									<VisualState x:Name="MouseOver">
										<Storyboard>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="btnHistoriaClinica">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1.24"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="btnHistoriaClinica">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1.154"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="btnHistoriaClinica">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1.113"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="btnHistoriaClinica">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="-0.182"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="image">
												<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="image">
												<EasingDoubleKeyFrame KeyTime="0" Value="1.009"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="image">
												<EasingDoubleKeyFrame KeyTime="0" Value="0.002"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="image">
												<EasingDoubleKeyFrame KeyTime="0" Value="0.22"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="image">
												<EasingDoubleKeyFrame KeyTime="0" Value="1.02"/>
											</DoubleAnimationUsingKeyFrames>
											<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="image">
												<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
												<DiscreteObjectKeyFrame KeyTime="0:0:0.1" Value="{x:Static Visibility.Visible}"/>
											</ObjectAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
									<VisualState x:Name="Pressed"/>
									<VisualState x:Name="Disabled"/>
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>
							<Image x:Name="btnHistoriaClinica" RenderTransformOrigin="0.5,0.5" Source="032.png" Stretch="Fill" ToolTip="Historia Clínica">
								<Image.RenderTransform>
									<TransformGroup>
										<ScaleTransform/>
										<SkewTransform/>
										<RotateTransform/>
										<TranslateTransform/>
									</TransformGroup>
								</Image.RenderTransform>
							</Image>
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							<Image x:Name="image" Margin="0" Opacity="1" Source="2.png" Stretch="Fill" RenderTransformOrigin="0.5,0.5">
								<Image.RenderTransform>
									<TransformGroup>
										<ScaleTransform/>
										<SkewTransform/>
										<RotateTransform/>
										<TranslateTransform/>
									</TransformGroup>
								</Image.RenderTransform>
							</Image>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsFocused" Value="True"/>
							<Trigger Property="IsDefaulted" Value="True"/>
							<Trigger Property="IsMouseOver" Value="True"/>
							<Trigger Property="IsPressed" Value="True"/>
							<Trigger Property="IsEnabled" Value="False"/>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="btnInformacionCliente" TargetType="{x:Type Button}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Grid>
							<VisualStateManager.VisualStateGroups>
								<VisualStateGroup x:Name="CommonStates">
									<VisualState x:Name="Normal"/>
									<VisualState x:Name="MouseOver">
										<Storyboard>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="btnInformacionCliente">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1.24"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="btnInformacionCliente">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="-0.328"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="btnInformacionCliente">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1.209"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="btnInformacionCliente">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="-0.613"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="image">
												<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
											</DoubleAnimationUsingKeyFrames>
											<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="image">
												<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}"/>
												<DiscreteObjectKeyFrame KeyTime="0:0:0.1" Value="{x:Static Visibility.Visible}"/>
											</ObjectAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
									<VisualState x:Name="Pressed"/>
									<VisualState x:Name="Disabled"/>
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>
							<Image x:Name="btnInformacionCliente" RenderTransformOrigin="0.5,0.5" Source="046.png" Stretch="Fill" ToolTip="Informacion del Paciente">
								<Image.RenderTransform>
									<TransformGroup>
										<ScaleTransform/>
										<SkewTransform/>
										<RotateTransform/>
										<TranslateTransform/>
									</TransformGroup>
								</Image.RenderTransform>
							</Image>
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							<Image x:Name="image" Margin="0,-0.532,0,0" Opacity="0" Source="1.png" Stretch="Fill" Visibility="Hidden"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsFocused" Value="True"/>
							<Trigger Property="IsDefaulted" Value="True"/>
							<Trigger Property="IsMouseOver" Value="True"/>
							<Trigger Property="IsPressed" Value="True"/>
							<Trigger Property="IsEnabled" Value="False"/>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="btnPagos" TargetType="{x:Type Button}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Grid>
							<VisualStateManager.VisualStateGroups>
								<VisualStateGroup x:Name="CommonStates">
									<VisualState x:Name="Normal"/>
									<VisualState x:Name="MouseOver">
										<Storyboard>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="btnPagos">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1.24"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="btnPagos">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.413"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="btnPagos">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1.149"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="btnPagos">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="-0.373"/>
											</DoubleAnimationUsingKeyFrames>
											<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="image">
												<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
												<DiscreteObjectKeyFrame KeyTime="0:0:0.1">
													<DiscreteObjectKeyFrame.Value>
														<Visibility>Visible</Visibility>
													</DiscreteObjectKeyFrame.Value>
												</DiscreteObjectKeyFrame>
											</ObjectAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="image">
												<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
											</DoubleAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
									<VisualState x:Name="Pressed"/>
									<VisualState x:Name="Disabled"/>
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>
							<Image x:Name="btnPagos" RenderTransformOrigin="0.5,0.5" Source="058.png" Stretch="Fill" ToolTip="Factura y Pagos">
								<Image.RenderTransform>
									<TransformGroup>
										<ScaleTransform/>
										<SkewTransform/>
										<RotateTransform/>
										<TranslateTransform/>
									</TransformGroup>
								</Image.RenderTransform>
							</Image>
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							<Image x:Name="image" Source="5.png" Stretch="Fill"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsFocused" Value="True"/>
							<Trigger Property="IsDefaulted" Value="True"/>
							<Trigger Property="IsMouseOver" Value="True"/>
							<Trigger Property="IsPressed" Value="True"/>
							<Trigger Property="IsEnabled" Value="False"/>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="btnOdontograma" TargetType="{x:Type Button}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Grid>
							<VisualStateManager.VisualStateGroups>
								<VisualStateGroup x:Name="CommonStates">
									<VisualState x:Name="Normal"/>
									<VisualState x:Name="MouseOver">
										<Storyboard>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="btnOdontograma">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1.24"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="btnOdontograma">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.413"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="btnOdontograma">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1.149"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="btnOdontograma">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="-0.397"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="image">
												<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
											</DoubleAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
									<VisualState x:Name="Pressed"/>
									<VisualState x:Name="Disabled"/>
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>
							<Image x:Name="btnOdontograma" RenderTransformOrigin="0.5,0.5" Source="098.png" Stretch="Fill" ToolTip="Hodontograma y fotos">
								<Image.RenderTransform>
									<TransformGroup>
										<ScaleTransform/>
										<SkewTransform/>
										<RotateTransform/>
										<TranslateTransform/>
									</TransformGroup>
								</Image.RenderTransform>
							</Image>
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							<Image x:Name="image" Source="6.png" Stretch="Fill"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsFocused" Value="True"/>
							<Trigger Property="IsDefaulted" Value="True"/>
							<Trigger Property="IsMouseOver" Value="True"/>
							<Trigger Property="IsPressed" Value="True"/>
							<Trigger Property="IsEnabled" Value="False"/>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="btnSalir" TargetType="{x:Type Button}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Grid>
							<VisualStateManager.VisualStateGroups>
								<VisualStateGroup x:Name="CommonStates">
									<VisualState x:Name="Normal"/>
									<VisualState x:Name="MouseOver">
										<Storyboard>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="btnSalir1">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1.24"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="btnSalir1">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1.154"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="btnSalir1">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1.213"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="btnSalir1">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.312"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="image">
												<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.01"/>
											</DoubleAnimationUsingKeyFrames>
										</Storyboard>
									</VisualState>
									<VisualState x:Name="Pressed"/>
									<VisualState x:Name="Disabled"/>
								</VisualStateGroup>
							</VisualStateManager.VisualStateGroups>
							<Image x:Name="btnSalir1" RenderTransformOrigin="0.5,0.5" Source="018.png" Stretch="Fill" ToolTip="Salir">
								<Image.RenderTransform>
									<TransformGroup>
										<ScaleTransform/>
										<SkewTransform/>
										<RotateTransform/>
										<TranslateTransform/>
									</TransformGroup>
								</Image.RenderTransform>
							</Image>
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							<Image x:Name="image" Source="4.png" Stretch="Fill"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsFocused" Value="True"/>
							<Trigger Property="IsDefaulted" Value="True"/>
							<Trigger Property="IsMouseOver" Value="True"/>
							<Trigger Property="IsPressed" Value="True"/>
							<Trigger Property="IsEnabled" Value="False"/>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	</Window.Resources>
	<Window.Triggers>
		<EventTrigger RoutedEvent="FrameworkElement.Loaded"/>
		<EventTrigger RoutedEvent="FrameworkElement.Loaded"/>
	</Window.Triggers>
	<Grid x:Name="LayoutRoot">
		<Grid.ColumnDefinitions>
			<ColumnDefinition/>
		</Grid.ColumnDefinitions>
		<Grid Margin="0,-1.559,-1,0">
			<Rectangle x:Name="Rectangulo_Contenedor" Margin="0,1.559,1,0">
				<Rectangle.Fill>
	
					<LinearGradientBrush EndPoint="0.5,1" MappingMode="RelativeToBoundingBox" StartPoint="0.5,0">
						<GradientStop Color="#FF141414"/>
						<GradientStop Color="#FF03004B" Offset="0.829"/>
						<GradientStop Color="#FF05003D" Offset="1"/>
						<GradientStop Color="#FF5A5A5A" Offset="0.433"/>
					</LinearGradientBrush>

				</Rectangle.Fill>
			</Rectangle>
			<Rectangle VerticalAlignment="Top" Height="63.055" >
				<Rectangle.Fill>
	
				<!-- DefaultedBorderBrush is used to show KeyBoardFocus -->
					<LinearGradientBrush EndPoint="0.224,1.098" StartPoint="0.266,0.046">
						<GradientStop Offset="1" Color="#006A6A6A"/>
						<GradientStop Color="#8D01001D" Offset="0.973"/>
					</LinearGradientBrush>

				</Rectangle.Fill>
			</Rectangle>
		</Grid>
		<Rectangle Margin="4.215,62.373,3.785,8.682">
			<Rectangle.Fill>
				<LinearGradientBrush EndPoint="0.152,0.456" StartPoint="1.004,0.46">
					<GradientStop Color="White"/>
					<GradientStop Color="White" Offset="0.996"/>
				</LinearGradientBrush>
			</Rectangle.Fill>
			<Rectangle.Stroke>
				<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
					<GradientStop Color="#FFFFE281" Offset="0.0"/>
					<GradientStop Color="#FFFFE281" Offset="1.0"/>
					<GradientStop Color="White" Offset="0.25"/>
					<GradientStop Color="White" Offset="0.724"/>
				</LinearGradientBrush>
			</Rectangle.Stroke>
		</Rectangle>
		<Label Content="Histo" FontSize="32" Foreground="White" Background="#00FF0000" HorizontalAlignment="Left" Margin="24.287,3.687,0,0" FontWeight="Bold" VerticalAlignment="Top"/>
		<Label Content="dontology" Foreground="White" HorizontalAlignment="Left" Margin="108.17,16.622,0,0" FontSize="18.667" Width="111.576" VerticalAlignment="Top"/>
		<Label Content="Usuario ::" Foreground="White" Margin="0,11.03,54,0" FontSize="21.333" FontWeight="Bold" VerticalAlignment="Top" HorizontalAlignment="Right"/>
		<Grid x:Name="MenuBotones" HorizontalAlignment="Left" Margin="52.25,93.959,0,103.638" Width="67.123">
			<Button Content="Button" Style="{DynamicResource btnNuevo}" Height="58.041" Margin="1.07,0,1.123,0" VerticalAlignment="Top"/>
			<Button Content="" Margin="0,88,1.123,0" Style="{DynamicResource btnHistoriaClinica}" Height="58.041" VerticalAlignment="Top"/>
			<Button Content="" Margin="0,172.345,2.193,0" Style="{DynamicResource btnInformacionCliente}" Height="58.041" VerticalAlignment="Top"/>
			<Button Content="" Margin="0,0,2.193,178.411" Style="{DynamicResource btnPagos}" Height="58.041" VerticalAlignment="Bottom"/>
			<Button Content="" Margin="0,0,2.193,91.501" Style="{DynamicResource btnOdontograma}" Height="58.041" VerticalAlignment="Bottom"/>
			<Button Content="" Margin="1.07,0,0,0" Style="{DynamicResource btnSalir}" Height="58.041" VerticalAlignment="Bottom"/>
		</Grid>
		<Separator Margin="-105.624,0,0,318.37" VerticalAlignment="Bottom" Height="8.004" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Left" Width="557.75" Background="#FFE6E6E6">
			<Separator.RenderTransform>
				<TransformGroup>
					<ScaleTransform/>
					<SkewTransform/>
					<RotateTransform Angle="90.097"/>
					<TranslateTransform/>
				</TransformGroup>
			</Separator.RenderTransform>
		</Separator>
		<Button x:Name="btnSalir" HorizontalAlignment="Right" Margin="0,10.515,23.336,0" Style="{DynamicResource btnSalir2}" VerticalAlignment="Top" Width="26.664" Height="39.949" Content="Button"  IsTabStop="False" TabIndex="12" Click="btnSalir_Click" />
	</Grid>
</Window>